server {
  listen ${FRONTEND_PORT};
  listen  [::]:${FRONTEND_PORT};
  server_name _;
  server_tokens off;

  # Back-end server.
  location /api  {
    # Security settings.
    add_header 'Expect-CT' 'max-age=0' always;
    add_header 'X-Frame-Options' 'SAMEORIGIN' always;
    add_header 'X-DNS-Prefetch-Control' 'off' always;
    add_header 'Referrer-Policy' 'no-referrer' always;
    add_header 'X-Content-Type-Options' 'nosniff' always;
    add_header 'X-Permitted-Cross-Domain-Policies' 'none' always;
    add_header 'Strict-Transport-Security' 'max-age=123456; includeSubDomains' always;

    # CORS settings.
    add_header 'Access-Control-Allow-Origin' '${CORS_ALLOWED_ORIGINS}' always;
    if ($request_method = 'OPTIONS') {
      add_header 'Content-Length' 0;
      add_header 'Access-Control-Max-Age' 300;
      add_header 'Access-Control-Allow-Origin' '${CORS_ALLOWED_ORIGINS}';
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Methods' 'GET,POST,PUT,PATCH,DELETE,OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Auhtorization,Accept,Content-Type';
      return 204;
    }

    proxy_pass http://${BACKEND_HOST}:${BACKEND_PORT};
    proxy_http_version 1.1;
  }

  # Front-end server.
  location @frontend {
    proxy_http_version 1.1;
    proxy_set_header Host ${FRONTEND_HOST}:${FRONTEND_PORT};

    # Pre-renders only for search engines crawlers.
    if ($http_user_agent ~* "${BOT_USER_AGENTS}") {
      proxy_pass http://${PRERENDERER_HOST}:${PRERENDERER_PORT};
      break;
    }

    try_files /var/www/html/public/index.html =404;
  }

  # Static assets server.
  location / {
    try_files $uri @frontend;
    root /var/www/html/public;
    expires 7d;
  }

  # Front-end healthcheck.
  location /health {
    return 200;
  }
}
